{"version":3,"sources":["components/common/CustomBootstrap.js","helpers/IntlMessages.js","views/user/login.js","views/user/reset-password.js"],"names":["Colxx","props","widths","Separator","className","injectIntl","withRef","validatePassword","value","error","length","validateEmail","test","connect","authUser","loading","message","loginUserAction","loginUser","history","useState","email","password","useEffect","NotificationManager","success","initialValues","getCurrentUser","push","log","xxs","md","to","id","onSubmit","values","errors","touched","name","validate","type","color","size","validateNewPassword","newPassword","newPasswordAgain","accessToken","resetPasswordAction","resetPassword","logoutAction","logoutUser","oldPassword","warning"],"mappings":"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","file":"static/js/user-login.8c3ddd94.chunk.js","sourcesContent":["import React from 'react';\nimport { Col } from 'reactstrap';\n\nconst Colxx = (props) => (\n  <Col {...props} widths={['xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl']} />\n);\nconst Separator = ({ className }) => (\n  <div className={`separator ${className}`} />\n);\nexport { Colxx, Separator };\n","import React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nconst InjectMassage = (props) => <FormattedMessage {...props} />;\n\nexport default injectIntl(InjectMassage, {\n  withRef: false,\n});\n","import React, { useState, useEffect } from 'react';\nimport { Row, Card, CardTitle, Label, FormGroup, Button } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { Formik, Form, Field } from 'formik';\nimport { NotificationManager } from '../../components/common/react-notifications';\n\nimport { loginUser } from '../../redux/actions';\nimport { Colxx } from '../../components/common/CustomBootstrap';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport { getCurrentUser, log } from '../../helpers/Utils';\n\nconst validatePassword = (value) => {\n  let error;\n  if (!value) {\n    error = 'Please enter your password';\n  } else if (value.length < 4) {\n    error = 'Value must be longer than 3 characters';\n  }\n  return error;\n};\n\nconst validateEmail = (value) => {\n  let error;\n  if (!value) {\n    error = 'Please enter your email address';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n    error = 'Invalid email address';\n  }\n  return error;\n};\n\nconst Login = ({ history, loading, error, message, loginUserAction }) => {\n  const [email] = useState('');\n  const [password] = useState('');\n\n  useEffect(() => {\n    if (error) {\n      NotificationManager.error(error, 'Login Error', 3000, null, null, '');\n    }\n    if (!loading && message === 'otp_sent') {\n      NotificationManager.success(\n        'OTP Sent Successfully!',\n        'Login Success',\n        3000,\n        null,\n        null,\n        ''\n      );\n    }\n  }, [error, loading, message]);\n\n  const onUserLogin = (values) => {\n    if (!loading) {\n      if (values.email !== '' && values.password !== '') {\n        loginUserAction(values, history);\n      }\n    }\n  };\n\n  const initialValues = { email, password };\n\n  if (getCurrentUser() !== null) {\n    history.push('/');\n  }\n\n  if (error) log(error);\n\n  return (\n    <Row className=\"h-100\">\n      <Colxx xxs=\"12\" md=\"10\" className=\"mx-auto my-auto\">\n        <Card className=\"auth-card\">\n          <div className=\"position-relative image-side\" />\n          <div className=\"form-side\">\n            <NavLink to=\"/\" className=\"white\">\n              {/* <span className=\"logo-single\" /> */}\n            </NavLink>\n            <CardTitle className=\"mb-4\">\n              <h1 className=\"mb-4\"> FUGATAUA CRM PORTAL </h1> <br />\n              <IntlMessages id=\"user.login-title\" />\n            </CardTitle>\n\n            <Formik initialValues={initialValues} onSubmit={onUserLogin}>\n              {({ errors, touched }) => (\n                <Form className=\"av-tooltip tooltip-label-bottom\">\n                  <FormGroup className=\"form-group has-float-label\">\n                    <Label>\n                      <IntlMessages id=\"user.email\" />\n                    </Label>\n                    <Field\n                      className=\"form-control\"\n                      name=\"email\"\n                      validate={validateEmail}\n                    />\n                    {errors.email && touched.email && (\n                      <div className=\"invalid-feedback d-block\">\n                        {errors.email}\n                      </div>\n                    )}\n                  </FormGroup>\n                  <FormGroup className=\"form-group has-float-label\">\n                    <Label>\n                      <IntlMessages id=\"user.password\" />\n                    </Label>\n                    <Field\n                      className=\"form-control\"\n                      type=\"password\"\n                      name=\"password\"\n                      validate={validatePassword}\n                    />\n                    {errors.password && touched.password && (\n                      <div className=\"invalid-feedback d-block\">\n                        {errors.password}\n                      </div>\n                    )}\n                  </FormGroup>\n                  <div className=\"d-flex justify-content-end align-items-center\">\n                    <Button\n                      color=\"primary\"\n                      className={`btn-shadow btn-multiple-state ${\n                        loading ? 'show-spinner' : ''\n                      }`}\n                      size=\"lg\"\n                    >\n                      <span className=\"spinner d-inline-block\">\n                        <span className=\"bounce1\" />\n                        <span className=\"bounce2\" />\n                        <span className=\"bounce3\" />\n                      </span>\n                      <span className=\"label\">\n                        <IntlMessages id=\"user.login-button\" />\n                      </span>\n                    </Button>\n                  </div>\n                </Form>\n              )}\n            </Formik>\n          </div>\n        </Card>\n      </Colxx>\n    </Row>\n  );\n};\n\nconst mapStateToProps = ({ authUser }) => {\n  const { loading, message, error } = authUser;\n  return { loading, message, error };\n};\n\nexport default connect(mapStateToProps, {\n  loginUserAction: loginUser,\n})(Login);\n","import React, { useState, useEffect } from 'react';\nimport { Row, Card, CardTitle, Label, FormGroup, Button } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\nimport { Formik, Form, Field } from 'formik';\nimport { connect } from 'react-redux';\nimport { Colxx } from '../../components/common/CustomBootstrap';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport { logoutUser, resetPassword } from '../../redux/actions';\nimport { NotificationManager } from '../../components/common/react-notifications';\n\nconst validateNewPassword = (values) => {\n  const { newPassword, newPasswordAgain } = values;\n  const errors = {};\n  if (newPasswordAgain && newPassword !== newPasswordAgain) {\n    errors.newPasswordAgain = 'Please check your new password';\n  }\n  return errors;\n};\n\nconst ResetPassword = ({\n  accessToken,\n  history,\n  loading,\n  message,\n  error,\n  resetPasswordAction,\n  logoutAction,\n}) => {\n  const [oldPassword] = useState('');\n  const [newPassword] = useState('');\n  const [newPasswordAgain] = useState('');\n\n  useEffect(() => {\n    if (error) {\n      NotificationManager.warning(\n        error,\n        'Forgot Password Error',\n        3000,\n        null,\n        null,\n        ''\n      );\n    } else if (!loading && message === 'reset-success') {\n      NotificationManager.success(\n        'Please login with your new password.',\n        'Reset Password Success',\n        3000,\n        null,\n        null,\n        ''\n      );\n      logoutAction(history);\n    }\n  }, [error, history, loading, logoutAction, message, newPassword]);\n\n  const onResetPassword = (values) => {\n    if (!loading) {\n      if (values.newPassword !== '') {\n        resetPasswordAction({\n          accessToken,\n          oldPassword: values.oldPassword,\n          newPassword: values.newPassword,\n          history,\n        });\n      }\n    }\n  };\n\n  const initialValues = { oldPassword, newPassword, newPasswordAgain };\n\n  return (\n    <Row className=\"h-100\">\n      <Colxx xxs=\"12\" md=\"10\" className=\"mx-auto my-auto\">\n        <Card className=\"auth-card\">\n          <div className=\"position-relative image-side\" />\n          <div className=\"form-side\">\n            <NavLink to=\"/\" className=\"white\">\n              {/* <span className=\"logo-single\" /> */}\n            </NavLink>\n            <CardTitle className=\"mb-4\">\n              <h1 className=\"mb-4\"> FUGATAUA CRM PORTAL </h1> <br />\n              <IntlMessages id=\"user.reset-password\" />\n            </CardTitle>\n\n            <Formik\n              validate={validateNewPassword}\n              initialValues={initialValues}\n              onSubmit={onResetPassword}\n            >\n              {({ errors, touched }) => (\n                <Form className=\"av-tooltip tooltip-label-bottom\">\n                  <FormGroup className=\"form-group has-float-label\">\n                    <Label>\n                      <IntlMessages id=\"user.old-password\" />\n                    </Label>\n                    <Field\n                      className=\"form-control\"\n                      name=\"oldPassword\"\n                      type=\"password\"\n                    />\n                  </FormGroup>\n                  <FormGroup className=\"form-group has-float-label\">\n                    <Label>\n                      <IntlMessages id=\"user.new-password\" />\n                    </Label>\n                    <Field\n                      className=\"form-control\"\n                      name=\"newPassword\"\n                      type=\"password\"\n                    />\n                  </FormGroup>\n                  <FormGroup className=\"form-group has-float-label\">\n                    <Label>\n                      <IntlMessages id=\"user.new-password-again\" />\n                    </Label>\n                    <Field\n                      className=\"form-control\"\n                      name=\"newPasswordAgain\"\n                      type=\"password\"\n                    />\n                    {errors.newPasswordAgain && touched.newPasswordAgain && (\n                      <div className=\"invalid-feedback d-block\">\n                        {errors.newPasswordAgain}\n                      </div>\n                    )}\n                  </FormGroup>\n\n                  <div className=\"d-flex justify-content-end align-items-center\">\n                    <Button\n                      color=\"primary\"\n                      className={`btn-shadow btn-multiple-state ${\n                        loading ? 'show-spinner' : ''\n                      }`}\n                      size=\"lg\"\n                    >\n                      <span className=\"spinner d-inline-block\">\n                        <span className=\"bounce1\" />\n                        <span className=\"bounce2\" />\n                        <span className=\"bounce3\" />\n                      </span>\n                      <span className=\"label\">\n                        <IntlMessages id=\"user.reset-password-button\" />\n                      </span>\n                    </Button>\n                  </div>\n                </Form>\n              )}\n            </Formik>\n          </div>\n        </Card>\n      </Colxx>\n    </Row>\n  );\n};\n\nconst mapStateToProps = ({ authUser }) => {\n  const { newPassword, accessToken, loading, message, error } = authUser;\n  return { newPassword, accessToken, loading, message, error };\n};\n\nexport default connect(mapStateToProps, {\n  resetPasswordAction: resetPassword,\n  logoutAction: logoutUser,\n})(ResetPassword);\n"],"sourceRoot":""}